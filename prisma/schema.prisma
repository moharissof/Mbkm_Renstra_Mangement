// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas = ["public"]
}

enum role {
  Admin
  Ketua
  Waket_1
  Waket_2
  Kabag
  Staff_Kabag

  @@schema("public")
}

model users {
  id           String    @id @default(cuid())
  nikp         String?
  name         String
  email        String
  photo        String?
  no_telp      String
  isVerified   Boolean   @default(false)
  password     String
  jabatan_id   BigInt?
  last_login_at DateTime?
  created_at   DateTime?
  updated_at   DateTime?
  jabatan      jabatan?  @relation(fields: [jabatan_id], references: [id])
  program_kerja program_kerja[]
  laporan     laporan[]
  komentar   komentar[]
  activity_log activity_log[]
  file        file[]
  sender     Notification[] @relation("SentNotifications")
  recipient  Notification[] @relation("ReceivedNotifications")
  @@schema("public")
}

model bidang {
  id          BigInt    @id @default(autoincrement())
  nama        String
  deskripsi   String?
  created_at  DateTime?
  updated_at  DateTime?
  jabatan     jabatan[]
  point_renstra point_renstra[]

  @@schema("public")
  
}

model jabatan {
  id          BigInt    @id @default(autoincrement())
  nama        String
  deskripsi   String?
  role        role
  parent_id   BigInt?
  bidang_id   BigInt
  created_at  DateTime?
  updated_at  DateTime?
  users       users[]
  parent      jabatan?  @relation("jabatanHierarchy", fields: [parent_id], references: [id])
  children    jabatan[] @relation("jabatanHierarchy")
  bidang      bidang    @relation(fields: [bidang_id], references: [id])
  
  @@schema("public")
}

enum Status {
  Aktif
  Diarsipkan
  @@schema("public")
}

model periode_renstra {
  id          BigInt    @id @default(autoincrement())
  nama        String
  tahun_awal  Int
  tahun_akhir Int
  status      Status    @default(Aktif) // Gunakan enum Status
  renstra renstra[]
  created_at  DateTime?
  updated_at  DateTime?
  @@schema("public")
}

model renstra {
  id          BigInt         @id @default(autoincrement())
  periode_id  BigInt
  nama        String
  created_at  DateTime?
  updated_at  DateTime?
  periode     periode_renstra @relation(fields: [periode_id], references: [id])
  sub_renstra sub_renstra[]
  point_renstra point_renstra[]

  @@schema("public")
}

model sub_renstra {
  id          BigInt    @id @default(autoincrement())
  renstra_id  BigInt
  nama        String
  created_at  DateTime?
  updated_at  DateTime?
  renstra     renstra   @relation(fields: [renstra_id], references: [id])
  point_renstra point_renstra[]
  @@schema("public")
}

model point_renstra {
  id             BigInt    @id @default(autoincrement())
  renstra_id     BigInt
  sub_renstra_id BigInt
  nama           String
  presentase     Float?
  bidang_id      BigInt
  created_at     DateTime?
  updated_at     DateTime?
  renstra        renstra   @relation(fields: [renstra_id], references: [id])
  sub_renstra    sub_renstra @relation(fields: [sub_renstra_id], references: [id])
  bidang         bidang    @relation(fields: [bidang_id], references: [id])
  program_kerja program_kerja[]
  @@schema("public")
}

model periode_proker {
  id              BigInt      @id @default(autoincrement())
  tahun           String      @unique
  tanggal_mulai   DateTime
  tanggal_selesai DateTime
  created_at      DateTime?
  updated_at      DateTime?
  program_kerja   program_kerja[]
  @@schema("public")
}

enum Status_Proker {
  Draft
  Planning 
  Menunggu_Approve_Waket 
  Disetujui
  Ditolak
  On_Progress
  Done
  @@schema("public")
}

model program_kerja {
  id                      BigInt      @id @default(autoincrement())
  point_renstra_id        BigInt
  nama                    String
  deskripsi               String?
  strategi_pencapaian     String?
  progress                Float       @default(0.0)
  baseline                String?
  waktu_mulai             DateTime
  waktu_selesai           DateTime
  anggaran                BigInt?
  volume                  Int
  status                  Status_Proker
  first_approval_status   String?
  status_periode_first    String?
  second_approval_status  String?
  status_periode_second   String?
  user_id                 String
  periode_proker_id       BigInt
  alasan_penolakan        String?
  point_renstra           point_renstra @relation(fields: [point_renstra_id], references: [id])
  periode_proker          periode_proker @relation(fields: [periode_proker_id], references: [id])
  indikator_proker        indikator_proker[]
  point_standar           point_standar[] 
  users                   users @relation(fields: [user_id], references: [id])
  laporan                 laporan[]
  file                    file[]
  komentar                komentar[]
  created_at              DateTime?
  updated_at              DateTime?
  @@schema("public")
}

model indikator_proker {
  id              BigInt      @id @default(autoincrement())
  proker_id       BigInt
  nama            String
  target          String
  satuan          String
  created_at      DateTime?
  updated_at      DateTime?
  program_kerja   program_kerja @relation(fields: [proker_id], references: [id])
  @@schema("public")
}

model point_standar {
  id          BigInt    @id @default(autoincrement())
  nama        String
  point       Int
  created_at  DateTime?
  updated_at  DateTime?
  program_kerja program_kerja[]
  @@schema("public")
}

model laporan {
  id              BigInt      @id @default(autoincrement())
  program_kerja_id BigInt
  user_id         String
  laporan         String?
  realisasi       Int?
  link_file       String?
  created_at      DateTime?
  updated_at      DateTime?
  program_kerja   program_kerja @relation(fields: [program_kerja_id], references: [id])
  users           users @relation(fields: [user_id], references: [id])
  komentar        komentar[]
  @@schema("public")
}

model file {
  id            BigInt    @id @default(autoincrement())
  proker_id     BigInt
  user_id       String
  file          String
  link_drive    String
  drive_file_id String?
  mime_type     String?
  thumbnail_url String?
  deleted_at    DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  
  program_kerja program_kerja @relation(fields: [proker_id], references: [id])
  users       users        @relation(fields: [user_id], references: [id])
  
  @@schema("public")
}


model komentar {
  id          BigInt    @id @default(autoincrement())
  program_kerja_id BigInt
  laporan_id     BigInt?
  user_id     String
  comment     String?
  created_at  DateTime?
  updated_at  DateTime?
  program_kerja program_kerja @relation(fields: [program_kerja_id], references: [id])
  users       users @relation(fields: [user_id], references: [id])
  laporan    laporan? @relation(fields: [laporan_id], references: [id])
  @@schema("public")
}

model activity_log {
  id          BigInt    @id @default(autoincrement())
  action      String    // CREATE, UPDATE, DELETE, APPROVE, etc.
  entityType  String    // "ProgramKerja", "Laporan", etc.
  entityId    BigInt    // ID dari entitas terkait
  oldData     Json?     // Data sebelum perubahan (untuk update)
  newData     Json?     // Data setelah perubahan
  description String?
  userId      String
  user        users     @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  ipAddress   String?
  userAgent   String?
  @@schema("public")
  @@index([entityType, entityId])
  @@index([createdAt])
}

enum NotificationType {
  System
  Announcement
  Approval
  Rejection
  ProgressUpdate
  Comment
  @@schema("public")
}

model Notification {
  id              BigInt           @id @default(autoincrement())
  title           String
  message         String
  type            NotificationType @default(System)
  is_read         Boolean          @default(false)
  is_broadcast    Boolean          @default(false) // If true, sent to all users
  sender_id       String
  recipient_id    String?          // Null if broadcast
  related_entity  String?          // e.g., "ProgramKerja", "Laporan"
  related_entity_id BigInt?        // ID of related entity
  created_at      DateTime         @default(now())
  read_at        DateTime?
  
  sender          users            @relation("SentNotifications", fields: [sender_id], references: [id])
  recipient       users?           @relation("ReceivedNotifications", fields: [recipient_id], references: [id])
  
  @@schema("public")
  @@index([recipient_id, is_read])
  @@index([created_at])
  @@index([is_broadcast])
}

